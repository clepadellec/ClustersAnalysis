#' Title
#'
#' @param object your Univariate object
#' @param rescale rescale or not
#' @param d distance type
#'
#' @return Silhouette Coefficient of each row
#' @export
#'
#' @examples silhouette_ind(Univariate_object(iris,5))
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= object$group
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (u_data_type(X)=="quantitatives"){
X_bis=X
}
if (u_data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (u_data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=u_dummy_data(X,rescale)
}
if (u_data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=u_matrix_distance(X_bis,d)
moyenne_distance=u_mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
#' Title
#'
#' @param object your Univariate object
#' @param rescale
#' @param d
#'
#' @return
#' @export
#'
#' @examples
silhouette_plot=function(object, rescale=FALSE, d="euclidean"){
var_groupe <- object$name_group
sil=silhouette_ind(object,rescale,d)
y=object$df[[var_groupe]]
df=data.frame("silhouette"=sil, "cluster"=y)
# data frame contains the mean silhouette coefficient of clusters
t=tapply(df[,"silhouette"], df[,"cluster"],mean)
df_bis=data.frame("silhouette"=as.numeric(t), "cluster"=names(t))
# plot
g=ggplot(df, aes(cluster,silhouette,color=cluster))+geom_point(size=1.5)+ geom_point(data = df_bis, shape=15,size=4)+
theme(text = element_text(family = "serif", size=14), title = element_text(color = "#8b0000"))+
labs(title="Silhouette coefficient ") +ylim(-1,1)
return(g)
}
#' Title
#'
#' @param x
#' @param g
#'
#' @return
#' @export
#'
#' @examples
eta2=function(x,g){
moyenne=tapply(x,g, FUN = mean)
individu=tapply(x,g,FUN = length)
var_inter=sum(individu*((moyenne-mean(x))^2))
var_total=sum((x-mean(x))^2)
eta=var_inter/var_total
return(eta)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return
#' @export
#'
#' @examples
fisher_test_all=function(object){
var_groupe <- object$name_group
data=object$df[ ,object$ind.quan]
g=object$df[[var_groupe]]
n=nrow(data)
K=length(unique(g))
Eta2=apply(data,MARGIN = 2,FUN = function(x){return(eta2(x,g))})
Test_value=(n-K)/(K-1)*(Eta2)/(1-Eta2)
p_value=1-pf(Test_value,K-1,n-K)
df=data.frame('Eta2'=Eta2, 'Test_value'=Test_value, 'p_value'=p_value)
return(df)
}
#' Title
#'
#' @param g1
#' @param g2
#'
#' @return
#' @export
#'
#' @examples
rand_index=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
}
}
rand=(a+b)/((n*(n-1)/2))
return(rand)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return
#' @export
#'
#' @examples
kmean_rand_index=function(object){
indice= object$group
X=object$df[ ,object$ind.quan]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
n=length(unique(y))
X_cr=scale(X,center = T,scale = T)
n_means=kmeans(X_cr,centers = n,nstart = 5)
rand=rand_index(n_means$cluster,y)
return(rand)
}
silhouette_ind(Univariate_object(iris,5))
#' Title
#'
#' @param object your Univariate object
#' @param rescale rescale or not
#' @param d distance type
#'
#' @return Silhouette Coefficient of each row
#' @export
#'
#' @examples silhouette_ind(Univariate_object(iris,5))
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= object$group
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (u_data_type(X)=="quantitatives"){
X_bis=X
}
if (u_data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (u_data_type(X)=='quantitative-qualitative'|u_data_type(X)=='qualitatives'){
X_bis=u_dummy_data(X,rescale)
}
if (u_data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=u_matrix_distance(X_bis,d)
moyenne_distance=u_mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
#' Title
#'
#' @param object your Univariate object
#' @param rescale
#' @param d
#'
#' @return
#' @export
#'
#' @examples
silhouette_plot=function(object, rescale=FALSE, d="euclidean"){
var_groupe <- object$name_group
sil=silhouette_ind(object,rescale,d)
y=object$df[[var_groupe]]
df=data.frame("silhouette"=sil, "cluster"=y)
# data frame contains the mean silhouette coefficient of clusters
t=tapply(df[,"silhouette"], df[,"cluster"],mean)
df_bis=data.frame("silhouette"=as.numeric(t), "cluster"=names(t))
# plot
g=ggplot(df, aes(cluster,silhouette,color=cluster))+geom_point(size=1.5)+ geom_point(data = df_bis, shape=15,size=4)+
theme(text = element_text(family = "serif", size=14), title = element_text(color = "#8b0000"))+
labs(title="Silhouette coefficient ") +ylim(-1,1)
return(g)
}
#' Title
#'
#' @param x
#' @param g
#'
#' @return
#' @export
#'
#' @examples
eta2=function(x,g){
moyenne=tapply(x,g, FUN = mean)
individu=tapply(x,g,FUN = length)
var_inter=sum(individu*((moyenne-mean(x))^2))
var_total=sum((x-mean(x))^2)
eta=var_inter/var_total
return(eta)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return
#' @export
#'
#' @examples
fisher_test_all=function(object){
var_groupe <- object$name_group
data=object$df[ ,object$ind.quan]
g=object$df[[var_groupe]]
n=nrow(data)
K=length(unique(g))
Eta2=apply(data,MARGIN = 2,FUN = function(x){return(eta2(x,g))})
Test_value=(n-K)/(K-1)*(Eta2)/(1-Eta2)
p_value=1-pf(Test_value,K-1,n-K)
df=data.frame('Eta2'=Eta2, 'Test_value'=Test_value, 'p_value'=p_value)
return(df)
}
#' Title
#'
#' @param g1
#' @param g2
#'
#' @return
#' @export
#'
#' @examples
rand_index=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
}
}
rand=(a+b)/((n*(n-1)/2))
return(rand)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return
#' @export
#'
#' @examples
kmean_rand_index=function(object){
indice= object$group
X=object$df[ ,object$ind.quan]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
n=length(unique(y))
X_cr=scale(X,center = T,scale = T)
n_means=kmeans(X_cr,centers = n,nstart = 5)
rand=rand_index(n_means$cluster,y)
return(rand)
}
silhouette_ind(Univariate_object(iris,5))
library(factoextra)
library(FactoMineR)
library(fastDummies)
library(questionr)
library(rdist)
silhouette_ind(Univariate_object(iris,5))
#' Title
#'
#' @param object your Univariate object
#' @param rescale rescale or not
#' @param d distance type
#'
#' @return Silhouette Coefficient of each row
#' @export
#'
#' @examples u_silhouette_ind(Univariate_object(iris,5))
u_silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= object$group
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (u_data_type(X)=="quantitatives"){
X_bis=X
}
if (u_data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (u_data_type(X)=='quantitative-qualitative'|u_data_type(X)=='qualitatives'){
X_bis=u_dummy_data(X,rescale)
}
if (u_data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=u_matrix_distance(X_bis,d)
moyenne_distance=u_mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
#' Title
#'
#' @param object your Univariate object
#' @param rescale
#' @param d
#'
#' @return
#' @export
#'
#' @examples
silhouette_plot=function(object, rescale=FALSE, d="euclidean"){
var_groupe <- object$name_group
sil=silhouette_ind(object,rescale,d)
y=object$df[[var_groupe]]
df=data.frame("silhouette"=sil, "cluster"=y)
# data frame contains the mean silhouette coefficient of clusters
t=tapply(df[,"silhouette"], df[,"cluster"],mean)
df_bis=data.frame("silhouette"=as.numeric(t), "cluster"=names(t))
# plot
g=ggplot(df, aes(cluster,silhouette,color=cluster))+geom_point(size=1.5)+ geom_point(data = df_bis, shape=15,size=4)+
theme(text = element_text(family = "serif", size=14), title = element_text(color = "#8b0000"))+
labs(title="Silhouette coefficient ") +ylim(-1,1)
return(g)
}
#' Title
#'
#' @param x
#' @param g
#'
#' @return
#' @export
#'
#' @examples
eta2=function(x,g){
moyenne=tapply(x,g, FUN = mean)
individu=tapply(x,g,FUN = length)
var_inter=sum(individu*((moyenne-mean(x))^2))
var_total=sum((x-mean(x))^2)
eta=var_inter/var_total
return(eta)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return
#' @export
#'
#' @examples
fisher_test_all=function(object){
var_groupe <- object$name_group
data=object$df[ ,object$ind.quan]
g=object$df[[var_groupe]]
n=nrow(data)
K=length(unique(g))
Eta2=apply(data,MARGIN = 2,FUN = function(x){return(eta2(x,g))})
Test_value=(n-K)/(K-1)*(Eta2)/(1-Eta2)
p_value=1-pf(Test_value,K-1,n-K)
df=data.frame('Eta2'=Eta2, 'Test_value'=Test_value, 'p_value'=p_value)
return(df)
}
#' Title
#'
#' @param g1
#' @param g2
#'
#' @return
#' @export
#'
#' @examples
rand_index=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
}
}
rand=(a+b)/((n*(n-1)/2))
return(rand)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return
#' @export
#'
#' @examples
kmean_rand_index=function(object){
indice= object$group
X=object$df[ ,object$ind.quan]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
n=length(unique(y))
X_cr=scale(X,center = T,scale = T)
n_means=kmeans(X_cr,centers = n,nstart = 5)
rand=rand_index(n_means$cluster,y)
return(rand)
}
u_silhouette_ind(Univariate_object(iris,5))
#'
#' @param object your Univariate object
#' @param rescale rescale or not
#' @param d the distance measure to be used and this must be "euclidean" or "L1"
#'
#' @return the silhouette plot
#' @import ggplot2
#' @export
#'
#' @examples u_silhouette_plot(Univariate_object(iris,5))
u_silhouette_plot=function(object, rescale=FALSE, d="euclidean"){
var_groupe <- object$name_group
sil=u_silhouette_ind(object,rescale,d)
y=object$df[[var_groupe]]
df=data.frame("silhouette"=sil, "cluster"=y)
# data frame contains the mean silhouette coefficient of clusters
t=tapply(df[,"silhouette"], df[,"cluster"],mean)
df_bis=data.frame("silhouette"=as.numeric(t), "cluster"=names(t))
# plot
g=ggplot(df, aes(cluster,silhouette,color=cluster))+geom_point(size=1.5)+ geom_point(data = df_bis, shape=15,size=4)+
theme(text = element_text(family = "serif", size=14), title = element_text(color = "#8b0000"))+
labs(title="Silhouette coefficient ") +ylim(-1,1)
return(g)
}
u_silhouette_plot(Univariate_object(iris,5))
library(ClustersAnalysis)
