if (hyp_gauss==TRUE){
print(t.test(new_data[,j]~new_data$var_groupe)$p.value)
}else{
print("un des deux échantillons n'est pas gaussien")
}
}
}
#return(data)
}
ttest_all(data_0,'Region')
colnames(data_0[,10])
colnames(data_0[10])
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
for (i in lst_grp){
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
print("-------------------------------------------")
print(paste("i : ",i))
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
print(t.test(new_data[,j]~new_data$var_groupe)$p.value)
}else{
print("un des deux échantillons n'est pas gaussien")
}
}
}
#return(data)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
col=1
for (i in lst_grp){
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
lig=lig+1
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
print("-------------------------------------------")
print(paste("i : ",i))
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
res[lig,col]=t.test(new_data[,j]~new_data$var_groupe)$p.value
}else{
res[lig,col]="une des 2 pop non gaussien"
}
col=col+1
}
}
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
col=1
for (i in lst_grp){
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
print("-------------------------------------------")
print(paste("i : ",i))
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
res[lig,col]=t.test(new_data[,j]~new_data$var_groupe)$p.value
}else{
res[lig,col]="une des 2 pop non gaussien"
}
col=col+1
}
lig=lig+1
}
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
print(res)
lig=1
col=1
for (i in lst_grp){
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
print("-------------------------------------------")
print(paste("i : ",i))
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
print(paste(lig,col))
res[lig,col]=t.test(new_data[,j]~new_data$var_groupe)$p.value
}else{
print(paste(lig,col))
res[lig,col]="une des 2 pop non gaussien"
}
col=col+1
}
lig=lig+1
}
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
col=1
for (i in lst_grp){
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
#print("-------------------------------------------")
#print(paste("i : ",i))
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
print(paste(lig,col))
res[lig,col]=t.test(new_data[,j]~new_data$var_groupe)$p.value
}else{
print(paste(lig,col))
res[lig,col]="une des 2 pop non gaussien"
}
print(res)
col=col+1
}
lig=lig+1
}
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
col=1
for (i in lst_grp){
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
#print("-------------------------------------------")
#print(paste("i : ",i))
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
print(paste(lig,col))
res[lig,col]=t.test(new_data[,j]~new_data$var_groupe)$p.value
}else{
print(paste(lig,col))
res[lig,col]=NA
}
print(res)
col=col+1
}
lig=lig+1
}
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
for (i in lst_grp){
col=1
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
#print("-------------------------------------------")
#print(paste("i : ",i))
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
print(paste(lig,col))
res[lig,col]=t.test(new_data[,j]~new_data$var_groupe)$p.value
}else{
print(paste(lig,col))
res[lig,col]=NA
}
print(res)
col=col+1
}
lig=lig+1
}
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
for (i in lst_grp){
col=1
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
pv=t.test(new_data[,j]~new_data$var_groupe)$p.value
if(round(as.numeric(pv),5)<0.05){res[lig,col]="significatif"}else{res[lig,col]="non significatif"}
}else{
res[lig,col]=NA
}
col=col+1
}
lig=lig+1
}
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
for (i in lst_grp){
col=1
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
pv=t.test(new_data[,j]~new_data$var_groupe)$p.value
if(round(as.numeric(pv),5)<0.05){res[lig,col]="significatif"}else{res[lig,col]="non significatif"}
}else{
res[lig,col]=NA
}
col=col+1
}
lig=lig+1
}
rownames(res)<- lst_grp
colnames(res)<- var_quanti
return(res)
}
ttest_all(data_0,'Region')
#' Title
#'
#' @param df
#' @param var_groupe
#'
#' @return
#' @export
#'
#' @examples
ttest_all <- function(df,var_groupe){
type_var <- df %>% head %>% collect %>% lapply(class) %>% unlist
# Repère index var quanti
var_quanti <- c(which(type_var == "numeric" | type_var == "integer"))
# Supprime var quanti
data <- df[,c(var_quanti)]
var_groupe <-df[[var_groupe]]
data <- cbind(data,var_groupe)
lst_grp<-unique(var_groupe)
#print(data$var_groupe)
res <- matrix(data = NA, nrow = length(lst_grp), ncol = length(var_quanti))
lig=1
for (i in lst_grp){
col=1
new_data=data
new_data$var_groupe[new_data$var_groupe != i] <- "others"
pop_a=new_data[new_data$var_groupe==i,]
pop_b=new_data[new_data$var_groupe!=i,]
gauss=TRUE
if(nrow(pop_a)<30|nrow(pop_b)<30){gauss=FALSE}
for (j in 1:length(var_quanti)){
hyp_gauss=TRUE
if (gauss==FALSE){
hyp_gauss <- shapiro_test(pop_a[,j],pop_b[,j])
}
print(paste("j : ",colnames(new_data[j])))
if (hyp_gauss==TRUE){
pv=t.test(new_data[,j]~new_data$var_groupe)$p.value
if(round(as.numeric(pv),5)<0.05){res[lig,col]="significatif"}else{res[lig,col]="non significatif"}
}else{
res[lig,col]=NA
}
col=col+1
}
lig=lig+1
}
rownames(res)<- lst_grp
colnames(res)<- colnames(data[var_quanti])
return(res)
}
ttest_all(data_0,'Region')
install.packages("fastDummies")
library(fastDummies)
