df_dataframe=data_bis[g==nom,]
len_df_dataframe=nrow(df_dataframe)
S=1/len_df_dataframe* sum(apply(df_dataframe,MARGIN = 1,FUN = function(x){return(sum((x-as.numeric(barycentre[,nom]))^2))}))
intra_DB=c(intra_DB,S)
}
indice_DB=data.frame(intra_DB)
colnames(indice_DB)="Indice de Davies Bouldin"
rownames(indice_DB)=nom_cluster
# distance entre des barycentres
dist=pdist(t(barycentre))
# calcul de l'indice DB
DB=c()
for (i in 1:n_G){
s=(indice_DB[-i,]+indice_DB[i,])/dist[i,-i]
DB=c(DB,max(s))
}
DB
data_bis=iris[,1:4]
g=iris[,5]
G=apply(data_bis, MARGIN = 2, FUN = mean)
n_g=tapply(iris[,1],g,FUN = length)
n_G=length(unique(g))
columns=ncol(data_bis)
row=nrow(data_bis)
barycentre=c()
for (i in 1:columns){
barycentre=rbind(barycentre,tapply(data_bis[,i], g, FUN = mean))
}
nom_cluster=colnames(barycentre)
### distance intra-classe
intra_DB=c()
for (nom in nom_cluster){
df_dataframe=data_bis[g==nom,]
len_df_dataframe=nrow(df_dataframe)
S=1/len_df_dataframe* sum(apply(df_dataframe,MARGIN = 1,FUN = function(x){return(sum((x-as.numeric(barycentre[,nom]))^2))}))
intra_DB=c(intra_DB,S)
}
indice_DB=data.frame(intra_DB)
colnames(indice_DB)="Indice de Davies Bouldin"
rownames(indice_DB)=nom_cluster
# distance entre des barycentres
dist=pdist(t(barycentre))
# calcul de l'indice DB
DB=c()
for (i in 1:n_G){
s=(indice_DB[-i,]+indice_DB[i,])/dist[i,-i]
DB=c(DB,max(s))
}
DB
indice_DB
dist
data_bis=iris[,1:4]
g=iris[,5]
G=apply(data_bis, MARGIN = 2, FUN = mean)
n_g=tapply(iris[,1],g,FUN = length)
n_G=length(unique(g))
columns=ncol(data_bis)
row=nrow(data_bis)
barycentre=c()
for (i in 1:columns){
barycentre=rbind(barycentre,tapply(data_bis[,i], g, FUN = mean))
}
nom_cluster=colnames(barycentre)
### distance intra-classe
intra_DB=c()
for (nom in nom_cluster){
df_dataframe=data_bis[g==nom,]
len_df_dataframe=nrow(df_dataframe)
S=1/len_df_dataframe* sum(apply(df_dataframe,MARGIN = 1,FUN = function(x){return(sum((x-as.numeric(barycentre[,nom]))^2))}))
intra_DB=c(intra_DB,S)
}
intra_distance_DB=data.frame(intra_DB)
colnames(intra_distance_DB)="Indice de Davies Bouldin"
rownames(intra_distance_DB)=nom_cluster
# distance entre des barycentres
dist=pdist(t(barycentre))
# calcul de l'indice DB
DB=c()
for (i in 1:n_G){
s=(intra_distance_DB[-i,]+intra_distance_DB[i,])/dist[i,-i]
DB=c(DB,max(s))
}
DB
data_bis=iris[,1:4]
g=iris[,5]
G=apply(data_bis, MARGIN = 2, FUN = mean)
n_g=tapply(iris[,1],g,FUN = length)
n_G=length(unique(g))
columns=ncol(data_bis)
row=nrow(data_bis)
barycentre=c()
for (i in 1:columns){
barycentre=rbind(barycentre,tapply(data_bis[,i], g, FUN = mean))
}
nom_cluster=colnames(barycentre)
### distance intra-classe
intra_DB=c()
for (nom in nom_cluster){
df_dataframe=data_bis[g==nom,]
len_df_dataframe=nrow(df_dataframe)
S=1/len_df_dataframe* sum(apply(df_dataframe,MARGIN = 1,FUN = function(x){return(sum((x-as.numeric(barycentre[,nom]))^2))}))
intra_DB=c(intra_DB,S)
}
intra_distance_DB=data.frame(intra_DB)
colnames(intra_distance_DB)="Indice de Davies Bouldin"
rownames(intra_distance_DB)=nom_cluster
# distance entre des barycentres
dist=pdist(t(barycentre))
# calcul de l'indice DB
DB=c()
for (i in 1:n_G){
s=(intra_distance_DB[-i,]+intra_distance_DB[i,])/dist[i,-i]
DB=c(DB,max(s))
}
indice_DB_final=data.frame(DB)
colnames(indice_DB_final)='Indice de Davies Bouldin'
rownames(indice_DB_final)=nom_cluster
indice_DB_final
acm_plot_multi(chien)
library(ClustersAnalysis)
acm_plot_multi(chien)
m_acm_plot_multi(chien)
data("iris")
data("iris")
m_DB_index_multi(iris[,1:4],iris[,5])
data("iris")
object=multivariate_object(iris,5)
m_DB_index_multi(object)
data("iris")
object=multivariate_object(iris,5)
m_DB_index_multi(object)
m_silhouette_plot_multi(object)
library(ClustersAnalysis)
u_afc_plot((Univariate_object(esoph,1)),3)
u_afc_plot((Univariate_object(esoph,1)),4)
u_afc_plot((Univariate_object(esoph,1)),1)
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
m_rand_ajusted_multi=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
if ((g1[i]==g1[j]) & (g2[i]!=g2[j])){
c=c+1
}
if ((g1[i]!=g1[j]) & (g2[i]==g2[j])){
c=c+1
}
}
}
rand=(a+b+c+d)/((n*(n-1)/2))
return(rand)
}
g1=c(1,2,3)
g2=c(3,2,1)
m_rand_ajusted_multi(g1,g2)
m_rand_ajusted_multi=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
if ((g1[i]==g1[j]) & (g2[i]!=g2[j])){
c=c+1
}
if ((g1[i]!=g1[j]) & (g2[i]==g2[j])){
c=c+1
}
}
}
rand1=a-(a+b)*(a+c)/(a+b+c+d)
rand2=1/2*(2*a+b+c)-(a+b)*(a+c)/(a+b+c+d)
rand=rand1/rand2
return(rand)
}
m_rand_ajusted_multi(g1,g2)
g1=c(1,2,3)
g2=c(3,2,1)
m_kmean_rand_ajusted_multi(multivariate_object(infert,1))
multivariate_object(infert,1)
m_kmean_rand_index_multi(multivariate_object(infert,1))
m_kmean_clustering_plot_multi(multivariate_object(infert,1))
infert[,1]
unique(infert[,1])
m_kmean_rand_ajusted_multi(multivariate_object(infert,1))
m_kmean_rand_ajusted_multi(multivariate_object(iris,5))
m_kmean_clustering_plot_multi(multivariate_object(iris,5))
m_kmean_rand_ajusted_multi(iris$Species,iris$Species)
m_rand_ajusted_multi(iris$Species,iris$Species)
6-36/15
g1=c(1,1,1,2,2,2)
g2=c(1,1,1,2,2,2)
rand=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
if ((g1[i]==g1[j]) & (g2[i]!=g2[j])){
c=c+1
}
if ((g1[i]!=g1[j]) & (g2[i]==g2[j])){
c=c+1
}
}
}
rand1=a-(a+b)*(a+c)/(a+b+c+d)
rand2=1/2*(2*a+b+c)-(a+b)*(a+c)/(a+b+c+d)
rand=rand1/rand2
return(rand)
}
rand(g1,g2)
rand=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
if ((g1[i]==g1[j]) & (g2[i]!=g2[j])){
c=c+1
}
if ((g1[i]!=g1[j]) & (g2[i]==g2[j])){
d=d+1
}
}
}
rand1=a-(a+b)*(a+c)/(a+b+c+d)
rand2=1/2*(2*a+b+c)-(a+b)*(a+c)/(a+b+c+d)
rand=rand1/rand2
return(rand)
}
rand(g1,g2)
rand=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
if ((g1[i]==g1[j]) & (g2[i]!=g2[j])){
c=c+1
}
if ((g1[i]!=g1[j]) & (g2[i]==g2[j])){
d=d+1
}
}
}
rand1=a-(a+c)*(a+d)/(a+b+c+d)
rand2=1/2*(2*a+c+d)-(a+c)*(a+d)/(a+b+c+d)
rand=rand1/rand2
return(rand)
}
g1=c(1,1,1,2,2,2)
g2=c(1,1,1,2,2,2)
rand(g1,g2)
library(ClustersAnalysis)
m_kmean_rand_index_multi(multivariate_object(infert,1))
m_kmean_rand_ajusted_multi(multivariate_object(infert,1))
m_kmean_rand_ajusted_multi(multivariate_object(iris,5))
u_desc_profils((Univariate_object(esoph,1)),3, interact = TRUE)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
summary(iris)
summary(infert)
summary(esoph)
summary(CO2)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
#devtools::install_github("clepadellec/ClustersAnalysis")
#load package
library(ClustersAnalysis)
help("u_plot_size_effect")
#Creation of univariate object using esoph dataframe and "agegp" (first column) as the group variable
u_esoph<-Univariate_object(esoph,1)
#detail of attributes associated with the object
print(u_esoph)
#use intecract=TRUE to show an interactive graphique with widgets like zoom, comparisons...
ClustersAnalysis::u_desc_profils(u_esoph,3,interact=FALSE)
u_desc_size_effect(u_esoph,3)
#use intecract=TRUE to show an interactive graphique with widgets like zoom, comparisons...
u_plot_size_effect(u_esoph,3,interact=FALSE)
u_chisq_test_all(u_esoph)
#install.packages("questionr")
#library(questionr)
# data(hdv2003)
# d<- hdv2003[,3:8]
# u_chisq_test_all(Univariate_object(d,1))
u_afc_plot((Univariate_object(esoph,1)),3)
#Creation of univariate object with the "Species" as group variable
u_iris <-Univariate_object(iris,5)
u_ttest_all(u_iris)
u_fisher_test_all(u_iris)
#Creation of multivariate object in case of quantitative data using iris dataframe and
# "Species" (fifth column) as the group variable
m_iris<-multivariate_object(iris,5)
#Creation of multivariate object in case of mixed data using iris dataframe and
# "Type" (second column) as the group variable
m_CO2<-multivariate_object(data.frame(CO2),2)
#detail of attributes associated with the object
#print(m_iris)
#print(m_CO2)
#quantitative data
m_R2_multivariate(m_iris)
summary(iris)
summary(infert)
summary(esoph)
summary(CO2)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
#load package
library(ClustersAnalysis)
help("u_plot_size_effect")
#Creation of univariate object using esoph dataframe and "agegp" (first column) as the group variable
u_esoph<-Univariate_object(esoph,1)
#detail of attributes associated with the object
print(u_esoph)
#use intecract=TRUE to show an interactive graphique with widgets like zoom, comparisons...
ClustersAnalysis::u_desc_profils(u_esoph,3,interact=FALSE)
u_desc_size_effect(u_esoph,3)
#use intecract=TRUE to show an interactive graphique with widgets like zoom, comparisons...
u_plot_size_effect(u_esoph,3,interact=FALSE)
u_chisq_test_all(u_esoph)
u_afc_plot((Univariate_object(esoph,1)),3)
#Creation of univariate object with the "Species" as group variable
u_iris <-Univariate_object(iris,5)
u_ttest_all(u_iris)
u_fisher_test_all(u_iris)
#Creation of multivariate object in case of quantitative data using iris dataframe and
# "Species" (fifth column) as the group variable
m_iris<-multivariate_object(iris,5)
#Creation of multivariate object in case of mixed data using iris dataframe and
# "Type" (second column) as the group variable
m_CO2<-multivariate_object(data.frame(CO2),2)
#detail of attributes associated with the object
#print(m_iris)
#print(m_CO2)
#quantitative data
m_R2_multivariate(m_iris)
#quantitative data
m_R2_multivariate_multi(m_iris)
#mixed data
m_R2_multivariate(m_CO2, rescale = TRUE)
#mixed data
m_R2_multivariate_multi(m_CO2, rescale = TRUE)
m_silhouette_ind(m_iris)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
#load package
library(ClustersAnalysis)
#Creation of multivariate object in case of quantitative data using iris dataframe and
# "Species" (fifth column) as the group variable
m_iris<-multivariate_object(iris,5)
#Creation of multivariate object in case of mixed data using iris dataframe and
# "Type" (second column) as the group variable
m_CO2<-multivariate_object(data.frame(CO2),2)
#detail of attributes associated with the object
#print(m_iris)
#print(m_CO2)
#quantitative data
m_R2_multivariate(m_iris)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
install.packages("ps")
library(ps)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
#load package
library(ClustersAnalysis)
#mixed data
m_R2_multivariate(m_CO2, rescale = TRUE)
#Creation of multivariate object in case of quantitative data using iris dataframe and
# "Species" (fifth column) as the group variable
m_iris<-multivariate_object(iris,5)
#Creation of multivariate object in case of mixed data using iris dataframe and
# "Type" (second column) as the group variable
m_CO2<-multivariate_object(data.frame(CO2),2)
#detail of attributes associated with the object
#print(m_iris)
#print(m_CO2)
#mixed data
m_R2_multivariate(m_CO2, rescale = TRUE)
m_silhouette_ind(m_iris)
m_silhouette_plot(m_iris, interact = FALSE)
m_sil_pca_plot(m_iris, interact = FALSE)
m_silhouette_ind(m_CO2,rescale = TRUE)
m_silhouette_plot(m_CO2,rescale = TRUE, interact = FALSE)
m_sil_pca_plot(m_CO2, rescale=TRUE,interact = FALSE)
m_sil_pca_plot(m_CO2, rescale=TRUE,interact = FALSE, i=1,j=3)
m_sil_pca_plot(m_CO2, rescale=TRUE,interact = FALSE, i=2,j=3)
m_acm_plot(multivariate_object(CO2[,1:3],1))
library(ClustersAnalysis)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
library(pkgload)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
#load package
library(ClustersAnalysis)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
#load package
library(ClustersAnalysis)
library(ClustersAnalysis)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
#Use the below line to install devtools if necessary
#install.packages("devtools")
#library(devtools)
#install package from github
#Use the below line to install ClustersAnalysis if necessary
devtools::install_github("clepadellec/ClustersAnalysis")
#load package
library(ClustersAnalysis)
library(ClustersAnalysis)
library(ClustersAnalysis)
