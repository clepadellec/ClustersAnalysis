name=names(tab)
if (length(name)==2){
type="quantitative-qualitative"
} else{
if (name=="quantitative"){
if (tab[[1]]==1){
type='quantitative'
} else{
type='quantitatives'
}
} else{
if (tab[[1]]==1){
type='qualitative'
} else{
type='qualitatives'
}
}
}
return(type)
}
#'
#' @param data a datafram
#' @param rescale a boolean
#'
#' @return data encoding with rescale or not
#'
#' @import fastDummies
#' @export
#'
#' @examples
u_dummy_data=function(data, rescale=FALSE){
dataf=data
col_names=colnames(data)
t=sapply(data, u_type_variable)
variable_qualitative=colnames(data)[t=="qualitative"]
variable_quantitative=colnames(data)[t=="quantitative"]
if (length(variable_qualitative)==0){
return("There is no qualitative variable in this data")
break
} else{
dataf= dummy_cols(data, select_columns = variable_qualitative, remove_selected_columns = TRUE)
}
if (rescale==TRUE){
if (length(variable_quantitative)==0){
return("There is no quantitative variable in this data")
break
} else{
for (i in variable_quantitative){
dataf[i]=scale(dataf[i], center = T, scale = T)
}
}
}
return(dataf)
}
#' @param X a matrix or dataframe with explanatory variables
#' @param d the distance measure to be used and this must be "euclidean" or "L1"
#'
#' @return the distance matrix computed by using the euclidean distance or L1 distance between the rows of X.
#'
#' @import rdist
#'
#' @export
#'
#' @examples
u_matrix_distance=function(X,d){
dist=pdist(X,d)
return(dist)
}
#' Title
#'
#' @param X a numeric symmetric matrix containing the pairwise distance between the rows of a data frame
#' @param y a factor such that length(X)=length(y)
#'
#' @return a data frame containing the average distance of each row to all observations of each cluster C
#' @export
#'
#' @examples
u_mean_distance=function(X,y){
m=nrow(X)
distance=c()
for (i in 1:m){
distance=rbind(distance,tapply(X[i,-i],y[-i], mean))
}
return(distance)
}
#' Title
#'
#' @param object your Univariate object
#' @param rescale rescale or not
#' @param d distance type
#'
#' @return Silhouette Coefficient of each row
#' @export
#'
#' @examples u_silhouette_ind(Univariate_object(iris,5))
u_silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= object$group
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (u_data_type(X)=="quantitatives"){
X_bis=X
}
if (u_data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (u_data_type(X)=='quantitative-qualitative'|u_data_type(X)=='qualitatives'){
X_bis=u_dummy_data(X,rescale)
}
if (u_data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=u_matrix_distance(X_bis,d)
moyenne_distance=u_mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
#'
#' @param object your Univariate object
#' @param rescale rescale or not
#' @param d the distance measure to be used and this must be "euclidean" or "L1"
#'
#' @return the silhouette plot
#' @import ggplot2
#' @export
#'
#' @examples u_silhouette_plot(Univariate_object(iris,5))
u_silhouette_plot=function(object, rescale=FALSE, d="euclidean"){
var_groupe <- object$name_group
sil=u_silhouette_ind(object,rescale,d)
y=object$df[[var_groupe]]
df=data.frame("silhouette"=sil, "cluster"=y)
# data frame contains the mean silhouette coefficient of clusters
t=tapply(df[,"silhouette"], df[,"cluster"],mean)
df_bis=data.frame("silhouette"=as.numeric(t), "cluster"=names(t))
# plot
g=ggplot(df, aes(cluster,silhouette,color=cluster))+geom_point(size=1.5)+ geom_point(data = df_bis, shape=15,size=4)+
theme(text = element_text(family = "serif", size=14), title = element_text(color = "#8b0000"))+
labs(title="Silhouette coefficient ") +ylim(-1,1)
return(g)
}
#' Title
#'
#' @param x a variable with quantitative value
#' @param g a factor such that length(x)=length(g)
#'
#' @return correlation value
#' @export
#'
#' @examples
u_eta2=function(x,g){
moyenne=tapply(x,g, FUN = mean)
individu=tapply(x,g,FUN = length)
var_inter=sum(individu*((moyenne-mean(x))^2))
var_total=sum((x-mean(x))^2)
eta=var_inter/var_total
return(eta)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return a dataframe with a summary of Fisher test between the target variable and others quanlitatives variables
#' @export
#'
#' @examples u_fisher_test_all(Univariate_object(iris,5))
u_fisher_test_all=function(object){
var_groupe <- object$name_group
data=object$df[ ,object$ind.quan]
g=object$df[[var_groupe]]
n=nrow(data)
K=length(unique(g))
Eta2=apply(data,MARGIN = 2,FUN = function(x){return(u_eta2(x,g))})
Test_value=(n-K)/(K-1)*(Eta2)/(1-Eta2)
p_value=1-pf(Test_value,K-1,n-K)
df=data.frame('Eta2'=Eta2, 'Test_value'=Test_value, 'p_value'=p_value)
return(df)
}
#' Title
#'
#' @param g1 first cluster
#' @param g2 second cluster
#'
#' @return Rand index measure to compare the similarity of two clustering.
#' @export
#'
#' @examples
u_rand_index=function(g1,g2){
if (length(g1)!= length(g2)){
return("g1 and g2 must have the same length")
stop()
}
a=0
b=0
c=0
d=0
n=length(g1)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((g1[i]==g1[j]) & (g2[i]==g2[j])){
a=a+1
}
if ((g1[i]!=g1[j]) & (g2[i]!=g2[j])){
b=b+1
}
}
}
rand=(a+b)/((n*(n-1)/2))
return(rand)
}
#' Title
#'
#' @param object your Univariate object
#'
#' @return rand index between the result of kmean and your group variable
#' @export
#'
#' @examples u_kmean_rand_index(Univariate_object(iris,5))
u_kmean_rand_index=function(object){
indice= object$group
X=object$df[ ,object$ind.quan]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
n=length(unique(y))
X_cr=scale(X,center = T,scale = T)
n_means=kmeans(X_cr,centers = n,nstart = 5)
rand=u_rand_index(n_means$cluster,y)
return(rand)
}
#' @param X a dataframe
#'
#' @param i first dim
#' @param j second dim
#' @param rescale a boolean
#'
#' @examples
u_acp_2_axes=function(X,i=1,j=2, rescale=FALSE){
if (i==0|j==0|i>ncol(X) | j>ncol(X) ){
return("the index must be larger than 0 and smaller than the number of variables")
stop()
}
acp=PCA(X,graph=FALSE)
acp.ind=acp$ind
acp.ind.cord=acp.ind$coord
df=acp.ind.cord[,c(i,j)]
dfbis=data.frame(df)
PC1=round(acp$eig[,2][i])
PC2=round(acp$eig[,2][j])
colnames(dfbis)=c(paste("Dim",i,"---",PC1,"%"), paste("Dim",j,"---",PC2,"%"))
return(dfbis)
}
#' @param rescale
#' @param d
#'
#' @return
#'
#' @import  ggplot2
#' @import FactoMineR
#' @export
#'
#' @examples
sil_pca_plot=function(object,i=1,j=2, rescale=FALSE, d="euclidean"){
indice= object$group
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (class(y)!="factor" & class(y)!="character"){
return("y must be a factor or character")
stop()
}
if (i==0|j==0|i>ncol(X) | j>ncol(X) ){
return("the index must be larger than 0 and smaller than the number of variables")
stop()
}
if (u_data_type(X)=="quantitatives"){
X_bis=X
}
if (u_data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (u_data_type(X)=='quantitative-qualitative'|u_data_type(X)=='qualitatives'){
X_bis=u_dummy_data(X,rescale)
}
if (u_data_type(X)=='qualitative'){
X_bis=dummy_cols(X, remove_first_dummy  = F)[,-1]
}
acp=u_acp_2_axes(X_bis,i,j)
sil=u_silhouette_ind(object,rescale,d)
a=colnames(acp)[1]
b=colnames(acp)[2]
percent1=as.numeric(substr(a,11,12))
percent2=as.numeric(substr(b,11,12))
cluster=y
colnames(acp)=c("Dimi", "Dimj")
g= ggplot(acp, aes(Dimi,Dimj, color =sil, shape =cluster)) +
geom_point(size=3) +   labs(x = paste("Dim", i,'---', percent1, "%"), y = paste("Dim", j,'---', percent2, "%"))+
theme(text = element_text(family = "serif", size=14), title = element_text(color = "#8b0000"))
return(g)
}
t= Univariate_object(iris,5)
sil_pca_plot(t)
library(FactoMineR)
library(factoextra)
sil_pca_plot(t)
library(questionr)
library(rdist)
sil_pca_plot(t)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
#setwd('C:/Users/clementlepadellec/Downloads/')
data_0=read.csv2("Donn√©es-R-1.csv", sep=";", row.names = 1)
ggplot(data = fly) +
geom_mosaic(aes(x = product(DoYouRecline, RudeToRecline), fill=DoYouRecline), na.rm=TRUE) +
labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
ggplot(df,
aes(x = cut, y = prop, width = cut.count, fill = clarity)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
# using diamonds dataset for illustration
df <- diamonds %>%
group_by(cut, clarity) %>%
summarise(count = n()) %>%
mutate(cut.count = sum(count),
prop = count/sum(count)) %>%
ungroup()
library(dplyr)
# using diamonds dataset for illustration
df <- diamonds %>%
group_by(cut, clarity) %>%
summarise(count = n()) %>%
mutate(cut.count = sum(count),
prop = count/sum(count)) %>%
ungroup()
ggplot(df,
aes(x = cut, y = prop, width = cut.count, fill = clarity)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
install.packages("ggmosaic")
library(ggmosaic)
ggplot(data = fly) +
geom_mosaic(aes(x = product(DoYouRecline, RudeToRecline), fill=DoYouRecline), na.rm=TRUE) +
labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
print(fly)
data = data_0[-c(1:11)]
View(data)
ggplot(data = data) +
geom_mosaic(aes(x = product(Region, Regime_poli), fill=Region), na.rm=TRUE) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=c(Region,Regime_poli)), na.rm=TRUE) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), y=Region, fill=Region), na.rm=TRUE) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data=titanic) +
geom_mosaic(aes(weight=Freq, x=product(Class, Age), fill=Survived))
ggplot(data=Titanic) +
geom_mosaic(aes(weight=Freq, x=product(Class, Age), fill=Survived))
ggplot(data = data, show.legend=TRUE) +
geom_mosaic(aes(x = product(Regime_poli), y=Region, fill=Region), na.rm=TRUE) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data = data, show.legend=TRUE) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data = fly) +
geom_mosaic(aes(x = product(DoYouRecline, RudeToRecline), fill=DoYouRecline), na.rm=TRUE) +
labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
ggplot(data = fly) +
geom_mosaic(aes(x = product(RudeToRecline), fill=RudeToRecline), na.rm=TRUE) +
labs(x="Is it rude recline? ", title='f(RudeToRecline)')
ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')+
theme(axis.text.x = element_text(face="bold", color="#993333",size=14, angle=45), axis.text.y = element_text(face="bold", color="#993333", size=14, angle=45))
p <- ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')+
theme(axis.text.x = element_text(face="bold", color="#993333",size=14, angle=45), axis.text.y = element_text(face="bold", color="#993333", size=14, angle=45))
library(plotly)
ggplotly(p)
p <- ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')
ggplotly(p)
p <- ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')+
theme(axis.text.x = element_text(angle=90), axis.text.y = element_text(angle=90))
ggplotly(p)
p <- ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Influence? ", title='f(Region | Regime_poli) f(Regime_poli)')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
p <- ggplot(data = data) +
geom_mosaic(aes(x = product(Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Regime",y="Region", title='wow')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
p <- ggplot(data = data) +
geom_mosaic(aes(x = product(Region,Regime_poli), fill=Region), na.rm=TRUE,show.legend=TRUE ) +
labs(x = "Regime",y="Region", title='wow')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
colnames(data[1])
colnames(data[2])
u_plot_size_effect<- function(object,ind_var_exp){
var_groupe <- object$name_group
x=object$df[,ind_var_exp]
y=object$df[[var_groupe]]
df=data.frame("explanatory"=x, "cluster"=y)
p <- ggplot(data = df) +
geom_mosaic(aes(x = product(x), fill=y), na.rm=TRUE,show.legend=TRUE ) +
labs(x = colnames(df[1]),y=colnames(df[1]), title='Distribution between cluster and explanatory')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
}
View(data)
t=Univariate_object(data,1)
u_size_effect_plot(t,2)
u_plot_size_effect<- function(object,ind_var_exp){
var_groupe <- object$name_group
x=object$df[,ind_var_exp]
y=object$df[[var_groupe]]
df=data.frame("explanatory"=x, "cluster"=y)
p <- ggplot(data = df) +
geom_mosaic(aes(x = product(x), fill=y), na.rm=TRUE,show.legend=TRUE ) +
labs(x = colnames(df[1]),y=colnames(df[1]), title='Distribution between cluster and explanatory')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
}
u_plot_size_effect(t,2)
u_plot_size_effect<- function(object,ind_var_exp){
var_groupe <- object$name_group
x=object$df[,ind_var_exp]
y=object$df[[var_groupe]]
df=data.frame("explanatory"=x, "cluster"=y)
p <- ggplot(data = df) +
geom_mosaic(aes(x = product(explanatory), fill=cluster), na.rm=TRUE,show.legend=TRUE ) +
labs(x = colnames(df[1]),y=colnames(df[1]), title='Distribution between cluster and explanatory')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
}
t=Univariate_object(data,1)
u_plot_size_effect(t,2)
t=Univariate_object(data,1)
u_plot_size_effect(t,2)
u_plot_size_effect<- function(object,ind_var_exp){
var_groupe <- object$name_group
x=object$df[,ind_var_exp]
y=object$df[[var_groupe]]
df=data.frame("explanatory"=x, "cluster"=y)
p <- ggplot(data = df) +
geom_mosaic(aes(x = product(explanatory), fill=cluster), na.rm=TRUE,show.legend=TRUE ) +
labs(x = colnames(object$df[1]),y=colnames(object$df[2]), title='Distribution between cluster and explanatory')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
}
t=Univariate_object(data,1)
u_plot_size_effect(t,2)
u_plot_size_effect<- function(object,ind_var_exp){
var_groupe <- object$name_group
x=object$df[,ind_var_exp]
y=object$df[[var_groupe]]
df=data.frame("explanatory"=x, "cluster"=y)
p <- ggplot(data = df) +
geom_mosaic(aes(x = product(explanatory), fill=cluster), na.rm=TRUE,show.legend=TRUE ) +
labs(x = colnames(object$df[2]),y=colnames(object$df[1]), title='Distribution between cluster and explanatory')+
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(p)
}
t=Univariate_object(data,1)
u_plot_size_effect(t,2)
u_plot_size_effect((Univariate_object(esoph,1)),3)
print(esoph)
u_plot_size_effect((Univariate_object(esoph,1)),2)
print(infert)
u_plot_size_effect((Univariate_object(infert,1)),2)
u_plot_size_effect((Univariate_object(infert,1)),2)
detach("package:ggmosaic", unload = TRUE)
detach("package:plotly", unload = TRUE)
