<<<<<<< Updated upstream
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= as.integer(object$ind_group_class)
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
data_type=function(X){
quali_quanti=sapply(X, FUN = type_variable)
#  quali_quanti=c()
#  n=ncol(X)
#  for (i in 1:n){
#    quali_quanti=c(quali_quanti,type_variable(X[,i]))
#  }
tab=table(quali_quanti)
name=names(tab)
if (length(name)==2){
type="quantitative-qualitative"
} else{
if (name=="quantitative"){
if (tab[[1]]==1){
type='quantitative'
} else{
type='quantitatives'
}
} else{
if (tab[[1]]==1){
type='qualitative'
} else{
type='qualitatives'
}
}
}
return(type)
}
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= as.integer(object$ind_group_class)
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
type_variable=function(x){
if (class(x)=='character'|length(unique(x))<7){
type=('qualitative')
} else{
type=('quantitative')
}
return(type)
}
data_type=function(X){
quali_quanti=sapply(X, FUN = type_variable)
#  quali_quanti=c()
#  n=ncol(X)
#  for (i in 1:n){
#    quali_quanti=c(quali_quanti,type_variable(X[,i]))
#  }
tab=table(quali_quanti)
name=names(tab)
if (length(name)==2){
type="quantitative-qualitative"
} else{
if (name=="quantitative"){
if (tab[[1]]==1){
type='quantitative'
} else{
type='quantitatives'
}
} else{
if (tab[[1]]==1){
type='qualitative'
} else{
type='qualitatives'
}
}
}
return(type)
}
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= as.integer(object$ind_group_class)
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= as.integer(object$ind_group_class)
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
print(data_type(X))
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
data_type=function(X){
quali_quanti=sapply(X, FUN = type_variable)
#  quali_quanti=c()
#  n=ncol(X)
#  for (i in 1:n){
#    quali_quanti=c(quali_quanti,type_variable(X[,i]))
#  }
tab=table(quali_quanti)
print(tab)
name=names(tab)
if (length(name)==2){
type="quantitative-qualitative"
} else{
if (name=="quantitative"){
if (tab[[1]]==1){
type='quantitative'
} else{
type='quantitatives'
}
} else{
if (tab[[1]]==1){
type='qualitative'
} else{
type='qualitatives'
}
}
}
return(type)
}
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= as.integer(object$ind_group_class)
X=object$df[,-indice]
var_groupe <- object$name_group
y=object$df[[var_groupe]]
print(data_type(X))
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
=======
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
sil_pca_plot(data,g,i=1,j=2)
silhouette_ind(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
silhouette_ind(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
fisher_test_all(data,g)
for (i in 1:4){
print(kmean_rand_index(data[,i],g))
}
kmean_rand_index(data[,2:4],g)
kmean_clustering_plot(data[,2:4],g,1,2)
kmean_clustering_plot(data[,2:4],g,1,2)
library(FactoMineR)
PCA(data)
silhouette_plot(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
silhouette_ind(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
install.packages("rdist")
df <- matrix(runif(200), ncol = 2)
dist_mat <- pdist(df)
library(pdist)
library(rdist)
dist_mat <- pdist(df)
dist_mat
pdist(data)
help("pdist")
library(ClustersAnalysis)
matrix_distance(data,"Euclidean")
sqrt(sum((data[1,]-data[2,])^2))
pdist(data,"euclidean")
matrix_distance(data,"euclidean")
pdist(data,"euclidean")
pdist(data,"Euclidean")
library(ClustersAnalysis)
silhouette_ind(data,g,"euclidean")
silhouette_plot(data,g,"Euclidean")
silhouette_plot(data,g,"euclidean")
kmean_clustering_plot(data[,2:4],g,1,2)
sil_pca_plot(data,g,i=2,j=3)
sil_pca_plot(data,g,i=1,j=2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
library(ClustersAnalysis)
data("iris")
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
sil_pca_plot(data,g,i=2,j=3)
silhouette_ind(data,g,"euclidean")
silhouette_plot(data,g,"euclidean")
fisher_test_all(data,g)
for (i in 1:4){
print(kmean_rand_index(data[,i],g))
}
kmean_rand_index(data[,2:4],g)
kmean_clustering_plot(data[,2:4],g,1,2)
sil_pca_plot(data,g,i=1,j=2)
data("iris")
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
sil_pca_plot(data,g,i=2,j=3)
silhouette_ind(data,g,"euclidean")
silhouette_plot(data,g,"euclidean")
fisher_test_all(data,g)
for (i in 1:4){
print(kmean_rand_index(data[,i],g))
}
kmean_rand_index(data[,2:4],g)
kmean_clustering_plot(data[,2:4],g,1,2)
kmean_clustering_plot(data[,2:4],g,1,2)
R2_multivariate(data,g)
source('~/.active-rstudio-document', echo=TRUE)
dataa(iris)
data(iris)
colnames(iris)
library(ClustersAnalysis)
iris['Sepal.Length']
type_variable(iris['Sepal.Length'])
class(iris['Sepal.Length'])
length(unique(iris['Sepal.Length']))
unique(iris['Sepal.Length'])
as.vector(iris['Sepal.Length'])
extract_ql(iris)
sapply(iris,type_variable)
t=sapply(iris,type_variable)
colnames(iris)[t=="qualitative"]
colnames(iris)[t=="quantitative"]
install.packages("fastDummies")
library(fastDummies)
dummy_cols(data, select_columns = ['Species'], remove_selected_columns = TRUE)
dummy_cols(data, select_columns ='Species', remove_selected_columns = TRUE)
dummy_cols(iris, select_columns ='Species', remove_selected_columns = TRUE)
library(ClustersAnalysis)
dummy(iris)
variable_qualitative=colnames(iris)[t=="qualitative"]
dummy_cols(iris, select_columns = variable_qualitative, remove_selected_columns = TRUE)
library(ClustersAnalysis)
dummy_data(iris)
iris[' Sepal.Length']=scale(iris$Sepal.Length, center = T)
iris$Sepal.Length
df=iris
df[' Sepal.Length']=scale(df$Sepal.Length, center = T)
df$Sepal.Length
scale(df$Sepal.Length, center = T)
data=iris[,1:4]
data['Sepal.Length']=scale(data$Sepal.Length, center = T)
data$Sepal.Length
data
library(ClustersAnalysis)
dummy_data(iris)
sapply(iris,type_variable)
sapply(iris,type_variable)
apply(iris,MARGIN = 2, type_variable)
library(ClustersAnalysis)
dummy_data(iris)
library(ClustersAnalysis)
dummy_data(iris)
data
variable_quantitative=colnames(data)[t=="quantitative"]
for (i in variable_quantitative){print(i)}
library(ClustersAnalysis)
dummy_data(iris)
iris
data("iris")
dummy_data(iris)
iris
data("iris")
dummy_data(iris)
apply(iris,MARGIN = 2, type_variable)
sapply(iris, type_variable)
sapply(iris, type_variable)
apply(iris, margin=1,type_variable)
apply(iris, margin=2,type_variable)
apply(iris, margin=2,FUN=type_variable)
apply(iris, MARGIN =2,FUN=type_variable)
apply(iris, MARGIN =2,FUN=function(x){return(type_variable(x))})
sapply(iris, type_variable)
data("USArrests")
sapply(USArrests,type_variable)
library(ClustersAnalysis)
dummy_data(iris)
library(ClustersAnalysis)
dummy_data(iris)
dummy_data(iris, rescale = T)
dummy_data(iris, rescale = TRUE)
library(ClustersAnalysis)
dummy_data(iris, rescale = TRUE)
scale(iris$Sepal.Length, center = T, scale = T)
library(ClustersAnalysis)
dummy_data(iris, rescale = TRUE)
t=dummy_data(iris, rescale = TRUE)
mean(t$Species_setosa)
mean(t$Sepal.Length)
sd(t$Sepal.Length)
dummy_data(iris, rescale = TRUE)[1:10,]
dummy_data(USArrests)
class(apply(iris,MARGIN = 2, type_variable))
class(sapply(iris,MARGIN = 2, type_variable))
class(sapply(iris, type_variable))
library(ClustersAnalysis)
dummy_data(USArrests)
t=sapply(USArrests, type_variable)
variable_qualitative=colnames(USArrests)[t=="qualitative"]
length(variable_qualitative)
library(ClustersAnalysis)
dummy_data(USArrests)
dummy_data(iris)
library(ClustersAnalysis)
dummy_data(iris)
dummy_data(iris, rescale = T)
data_type(iris)
data_type(USArrests)
data=iris[,1:4]
silhouette_ind(data, iris$Species)
library(ClustersAnalysis)
silhouette_ind(data, iris$Species)
silhouette_ind(iris, iris$Species)
silhouette_ind(iris$Species, iris$Species)
silhouette_ind(iris[,4:5], iris$Species)
silhouette_ind(iris[,4], iris$Species)
library(ClustersAnalysis)
silhouette_ind(iris[,4], iris$Species)
silhouette_ind(data.frame(iris[,4]), iris$Species)
dummy_data(iris$Species)
sapply(iris$Species,type_variable)
sapply(data.frame(iris$Species),type_variable)
dummy_data(data.frame(iris$Species))
?to.dummy
??to.dummy
dummy_cols(iris$Species)
dummy_cols(iris$Species, remove_selected_columns = T)
dummy_cols(iris$Species, remove_selected_columns = F)
dummy_cols(iris$Species, remove_selected_columns = T)
dummy_cols(iris$Species, remove_first_dummy  = T)
dummy_cols(iris$Species)
dummy_cols(data.frame(iris$Species), remove_selected_columns = T)
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1]
library(ClustersAnalysis)
silhouette_ind(iris$Species,iris$Species)
silhouette_ind(data.frame(iris$Species),iris$Species)
silhouette_ind(data.frame(iris$Sepal.Length),iris$Species)
library(ClustersAnalysis)
sil_pca_plot(iris[,1:4], iris$Species)
sil_pca_plot(iris[,1:4], iris$Species)
sil_pca_plot(iris[,1:4], iris$Species,i=1,j=2)
sil_pca_plot(iris[,1], iris$Species,i=1,j=2)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]), iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=1)
silhouette_ind(data.frame(iris$Species),iris$Species)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=2)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
library(ClustersAnalysis)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
sil_pca_plot(iris[,5], iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
library(ClustersAnalysis)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
sil_pca_plot(iris[,5], iris$Species,i=1,j=1)
sil_pca_plot(as.matrix(iris[,5]), iris$Species,i=1,j=1)
sil_pca_plot(as.matrix(iris[,4:5]), iris$Species,i=1,j=1)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,3:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:4], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:4], iris$Species,i=1,j=2)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
sil_pca_plot(iris[,3:4], iris$Species)
library(ClustersAnalysis)
sil_pca_plot(iris[,3:4], iris$Species)
library(ClustersAnalysis)
sil_pca_plot(iris[,3:4], iris$Species)
sil_pca_plot(iris[,4], iris$Species)
sil_pca_plot(data.frame(iris[,4]), iris$Species)
sil_pca_plot(data.frame(iris[,4]), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1]
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1][,1]
PCA(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1][,1],graph=FALSE)
library(FactoMineR)
PCA(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1][,1],graph=FALSE)
PCA(dummy_cols(data.frame(iris$Species), remove_first_dummy  = F)[,-1][,1],graph=FALSE)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
acp_2_axes(dummy_cols(data.frame(iris$Species), remove_first_dummy  = F)[,-1][,1])
acp_2_axes(dummy_cols(data.frame(iris$Species), remove_first_dummy  = F)[,-1])
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=3)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
sil_pca_plot(iris[,5], iris$Species,i=1,j=2)
sil_pca_plot(as.matrix(iris[,5]), iris$Species,i=1,j=2)
sil_pca_plot(as.matrix(iris[,5]), iris$Species,i=1,j=1)
df=data.frame(iris$Species)
sil_pca_plot(df, iris$Species,i=1,j=1)
data_type(df)
dummy_cols(df, remove_first_dummy  = F)[,-1]
X_bis=dummy_cols(df, remove_first_dummy  = F)[,-1]
acp_2_axes(X_bis,i,j)
acp_2_axes(X_bis,1,2)
acp=acp_2_axes(X_bis,1,2)
sil=silhouette_ind(X_bis,y,d)
library(ClustersAnalysis)
sil_pca_plot(df, iris$Species,i=1,j=1)
data.frame(df)
>>>>>>> Stashed changes
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
<<<<<<< Updated upstream
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= as.integer(object$ind_group_class)
X=object$df[,-indice]
print(X)
var_groupe <- object$name_group
print(var_groupe)
y=object$df[[var_groupe]]
print(y)
print(data_type(X))
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
silhouette_ind(test)
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= as.integer(object$ind_group_class)
print(indice)
X=object$df[,-indice]
print(X)
var_groupe <- object$name_group
print(var_groupe)
y=object$df[[var_groupe]]
print(y)
print(data_type(X))
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= object$ind_group_class
print(indice)
X=object$df[,-indice]
print(X)
var_groupe <- object$name_group
print(var_groupe)
y=object$df[[var_groupe]]
print(y)
print(data_type(X))
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
silhouette_ind=function(object,rescale=FALSE,d='euclidean'){
indice= object$group
print(indice)
X=object$df[,-indice]
print(X)
var_groupe <- object$name_group
print(var_groupe)
y=object$df[[var_groupe]]
print(y)
print(data_type(X))
if (data_type(X)=="quantitatives"){
X_bis=X
}
if (data_type(X)=="quantitative"){
X_bis=data.frame(X)
}
if (data_type(X)=='quantitative-qualitative'|data_type(X)=='qualitatives'){
X_bis=dummy_data(X,rescale)
}
if (data_type(X)=='qualitative'){
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
}
matrice_distance=matrix_distance(X_bis,d)
moyenne_distance=mean_distance(matrice_distance,y)
sil=c()
m=nrow(moyenne_distance)
if (nlevels(y)==1){
sil=rep(-1,m)
} else{
for (i in 1:m){
if (sum(y==y[i])==1){
sil[i]=-1
} else{
a=as.numeric(moyenne_distance[i,][as.character(y[i])])
b=min(as.numeric(moyenne_distance[i,colnames(moyenne_distance)!=as.character(y[i])]))
s=(b-a)/max(a,b)
sil=c(sil,s)
}
}
}
return(sil)
}
test=Univariate_object(data_0,11)
test
silhouette_ind(test)
install.packages("fastDummies")
library(fastDummies)
silhouette_ind(test)
fisher_test_all=function(object){
var_groupe <- object$name_group
data=object$df[ ,object$ind.quan]
g=object$df[[var_groupe]]
n=nrow(data)
K=length(unique(g))
Eta2=apply(data,MARGIN = 2,FUN = function(x){return(eta2(x,g))})
Test_value=(n-K)/(K-1)*(Eta2)/(1-Eta2)
p_value=1-pf(Test_value,K-1,n-K)
df=data.frame('Eta2'=Eta2, 'Test_value'=Test_value, 'p_value'=p_value)
return(df)
}
test=Univariate_object(data_0,11)
test
fisher_test_all(test)
=======
matrice_distance=matrix_distance(X_bis,'euclidean')
moyenne_distance=mean_distance(matrice_distance,'euclidean')
moyenne_distance=mean_distance(matrice_distance, iris$Species)
silhouette_ind(iris[,1:2], iris$Species)
silhouette_ind(iris[,5], iris$Species)
silhouette_ind(data.frame(iris[,5]), iris$Species)
silhouette_ind(dummy_cols(iris[,5], remove_first_dummy  = F)[,-1], iris$Species)
dummy_cols(X, remove_first_dummy  = F)[,-1]
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1]
class(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1])
data_type
data_type(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1])
dummy_data(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1])
library(ClustersAnalysis)
sil_pca_plot(iris$Species, iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Sepal.Length), iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=2)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=3)
library(ClustersAnalysis)
help(ClusterAnalysis)
data("iris")
iris
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,5)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
kmean_clustering_plot(data[,2:4],g,1,2)
data
silhouette_plot(data, iris$Species)
silhouette_plot(iris$Sepal.Length, iris$Species)
silhouette_plot(dât.frame(iris$Sepal.Length), iris$Species)
silhouette_plot(data.frame(iris$Sepal.Length), iris$Species)
silhouette_plot(data.frame(iris$Species), iris$Species)
silhouette_plot(data.frame(iris$Petal.Length), iris$Species)
sil_pca_plot(data,g,i=2,j=3)
sil_pca_plot(data,g,i=1,j=2)
data("iris")
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(iris[,1],g,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]),g,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]),g,i=1,j=1)
data("iris")
library(ClustersAnalysis)
sil_pca_plot(data.frame(iris$Sepal.Length),g,i=1,j=1)
sil_pca_plot(data.frame(iris$Sepal.Length),iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Sepal.Length),iris$Species,i=1,j=1)
data("USArrests")
USArrests
setwd('C:/Users/DELL/Desktop/Master SISE/Analyse factorielle/ACM')
library(openxlsx)
df=read.xlsx('races_canines_acm.xls')
df=read.xlsx('C:/Users/DELL/Desktop/Master SISE/Analyse factorielle/ACM/races_canines_acm.xls')
library(readxl)
df=read_excel('C:/Users/DELL/Desktop/Master SISE/Analyse factorielle/ACM/races_canines_acm.xls')
nrow(df)
nrow(df)
df
nrow(df)
ncol(df)
data=df[,2:8]
g=c(rep(1,9),rep(2,9), rep(3,9))
library(ClustersAnalysis)
data_type(df)
data_type(iris)
head(df,10)
type_variable(df[,1])
class(df[,1])
sapply(df,MARGIN = 1, FUN = type_variable)
sapply(df, FUN = type_variable)
sapply(iris, FUN = type_variable)
library(ClustersAnalysis)
data_type(iris)
data_type(df)
R2_multivariate(iris[,1:4],iris$Species)
R2_multivariate(data,g)
dummy_data(df)
dummy_data(df)
library(ClustersAnalysis)
dummy_data(df)
R2_multivariate(data,g)
length(g)
nrow(data)
tapply(data[,i], g, FUN = mean)
tapply(data[,1], g, FUN = mean)
data[,1]
dummy_data(data)
tapply(dummy_data(data),g,FUN = mean)
tapply(as.numeric(dummy_data(data)),g,FUN = mean)
dummy_data(df)[,1]
class(dummy_data(df)[,1])
as.vector(dummy_data(df)[,1])
class(as.vector(dummy_data(df)[,1]))
class(as.numeric(dummy_data(df)[,1]))
class(df)
chien=data.frame(df[,2:8],row.names = df$Chien)
chien
head(chien,10)
R2_multivariate(chien,g)
class(chien)
p=ncol(chien)
M=sum(sapply(chien, FUN = function(x){return(length(unique(x)))}))
n_acm=M-p
ACM=MCA(data, ncp = n_acm, graph = FALSE)
library(FactoMineR)
p=ncol(chien)
M=sum(sapply(chien, FUN = function(x){return(length(unique(x)))}))
n_acm=M-p
ACM=MCA(data, ncp = n_acm, graph = FALSE)
data_bis=ACM$ind$coord
data_bis
library(ClustersAnalysis)
R2_multivariate(chien,g)
R2_multivariate(chien,g, method = 'acm')
R2_multivariate(chien,g, method = 'encoding')-R2_multivariate(chien,g, method = 'acm')
library(FactoMineR)
p=ncol(chien)
M=sum(sapply(chien, FUN = function(x){return(length(unique(x)))}))
n_acm=M-p
ACM=MCA(data, ncp = 13, graph = FALSE)
data_bis=ACM$ind$coord
data_bis
library(FactoMineR)
p=ncol(chien)
M=sum(sapply(chien, FUN = function(x){return(length(unique(x)))}))
n_acm=M-p
ACM=MCA(data, ncp = 20, graph = FALSE)
data_bis=ACM$ind$coord
data_bis
Perform_ACP <- function(donnees){
#contr?le - data.frame
ok <- is.data.frame(donnees)
if (!ok){
stop("Ce n'est pas un data frame")
}
#contr?le du type de chaque variable
nb_ok <- sum(sapply(donnees,function(x){is.numeric(x)}))
if (nb_ok < ncol(donnees)){
stop("Il y a des variables non num?riques dans le data frame")
}
#ok - on peut y aller
instance <- list()
instance$X <- donnees
instance$calc <- princomp(donnees,cor=T,scores=T)
instance$vp <- instance$calc$sdev^2
class(instance) <- "ACP"
return(instance)
}
data("mtcars")
class(Perform_ACP)
data(mtcars)
obj <- Perform_ACP(mtcars)
print(class(obj))
Perform_ACP(mtcars)
class(Perform_ACP(mtcars))
print(class(Perform_ACP(mtcars)))
ACP=Perform_ACP(mtcars)
ACP$X
library(ClustersAnalysis)
data("iris")
classe_multivariate(iris$Sepal.Length,iris$Species,i=1,j=2)
classe_multivariate(data.frame(iris$Sepal.Length),iris$Species,i=1,j=2)
classe_multivariate(iris[,1:2],iris$Species,i=1,j=2)
library(ClustersAnalysis)
classe_multivariate(iris[,1:2],iris$Species,i=1,j=2)
class=classe_multivariate(iris[,1:2],iris$Species,i=1,j=2)
class(class)
library(ClustersAnalysis)
class=classe_multivariate(iris[,1:2],iris$Species,i=1,j=2)
class(class)
class$g
class$silhouette
>>>>>>> Stashed changes
