#ind$contrib# Contributions aux axes des profils lignes
#Visualisation des points lignes
fviz_mca_ind(res.mca[1,2], select.ind = list(cos2 = 80),col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),geom="text",
repel = TRUE
)
#ind$cos2# Cos2: qualite de representation des profils lignes
#ind$contrib# Contributions aux axes des profils lignes
#Visualisation des points lignes
fviz_mca_ind(res.mca[1:2,], select.ind = list(cos2 = 80),col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),geom="text",
repel = TRUE
)
#ind$cos2# Cos2: qualite de representation des profils lignes
#ind$contrib# Contributions aux axes des profils lignes
#Visualisation des points lignes
fviz_mca_ind(res.mca, select.ind = list(cos2 = 80),col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),axes=c(3,4),geom="text",
repel = TRUE
)
v1 <- factor(round(runif(500,1,4)))
v2 <- factor(round(runif(500,1,3)))
tab <- table(v1,v2)
print(tab)
cramer.v(tab)
chisq_test_all <- function(name_var_group,data){
options(warn=-1)
others_var <- colnames(data)[colnames(data)!=name_var_group]
res <- matrix(data = NA, nrow = length(others_var), ncol = 5)
for (i in 1:length(others_var)){
res[i,1]<-name_var_group
res[i,2]<-others_var[i]
res[i,3]<-chisq.test(data[name_var_group][,1],data[others_var[i]][,1])$p.value
if (round(as.numeric(res[i,3]),5)<0.05){
res[i,4]<-"significatif"
t<- table(data[name_var_group][,1],data[others_var[i]][,1])
v<- cramer.v(t)
res[i,5]<-v
}else{
res[i,4]<-"non significatif"
res[i,5]<-NA
}
}
res <- as.data.frame(res)
colnames(res)<-c("var.groupement","var.explicative","p.value.chisq.test","interpretation","intensité(v cramer)")
return(res)
}
Data=read.csv2("Données-R-1.csv", sep=";", row.names = 1)
Data.qual<- extract_ql(data)
library(ClustersAnalysis)
Data=read.csv2("Données-R-1.csv", sep=";", row.names = 1)
Data.qual<- extract_ql(data)
chisq_test_all("Continent",Data.qual)
View(Data.qual)
View(Data)
View(Data.qual)
Data=read.csv2("Données-R-1.csv", sep=";", row.names = 1)
Data.qual<- extract_ql(data)
View(Data)
chisq_test_all("liberte_internet",Data.qual)
chisq_test_all("liberte_internet",Data.qual)
chisq_test_all("Régim_simp",Data.qual)
chisq_test_all("Régime_simp",Data.qual)
library(ClustersAnalysis)
install.packages("rlang")
install.packages("devtools")
install.packages("rlang")
library(rlang)
install.packages("rlang")
library(rlang)
library(ClustersAnalysis)
apply(data, MARGIN = 2, FUN = mean)
data
data("iris")
data=iris[,1:4]
g=iris[,5]
apply(data, MARGIN = 2, FUN = mean)
tapply(data[,1], g, FUN = mean)
tapply(data[,2], g, FUN = mean)
tapply(data[,3], g, FUN = mean)
tapply(data[,4], g, FUN = mean)
datafram(list(tapply(data[,1], g, FUN = mean),tapply(data[,2], g, FUN = mean)))
a=tapply(data[,1], g, FUN = mean)
b=tapply(data[,1], g, FUN = mean)
cbien(a,b)
cbind(a,b)
rbind(a,b)
c=c()
cbind(c,a)
rbind(c,a)
rbind(tapply(data[,1], g, FUN = mean),tapply(data[,1], g, FUN = mean))
tapply(data[,1],g,FUN = length)
install.packages("digest")
library(ClustersAnalysis)
R2_multivariate(data,g)
library(ClustersAnalysis)
R2_multivariate(data,g)
as.numeric(R2_multivariate(data,g))
rbind(c(1,2,3),c(1,2,3))
R2_multivariate(data,g)
rbind(R2_multivariate(data,g),R2_multivariate(data,g))
A=rbind(R2_multivariate(data,g),R2_multivariate(data,g))
sum(A)
library(ClustersAnalysis)
R2_multivariate(data,g)
A=matrix(c(1,2,100,200), byrow = T, ncol = 2)
A
g=c(1,2)
R2_multivariate(A,g)
library(ClustersAnalysis)
library(ClustersAnalysis)
R2_multivariate(A,g)
data=iris[,1:4]
g=iris[,5]
R2_multivariate(data,g)
R2_multivariate(data,g)
R2_multivariate(data,g)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
silhouette_plot(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
R2_multivariate(data,g)
R2_multivariate(data,g)
data("iris")
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
sil_pca_plot(data,g,i=1,j=2)
silhouette_ind(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
silhouette_ind(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
fisher_test_all(data,g)
for (i in 1:4){
print(kmean_rand_index(data[,i],g))
}
kmean_rand_index(data[,2:4],g)
kmean_clustering_plot(data[,2:4],g,1,2)
kmean_clustering_plot(data[,2:4],g,1,2)
library(FactoMineR)
PCA(data)
silhouette_plot(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
silhouette_ind(data,g,"Euclidean")
silhouette_plot(data,g,"Euclidean")
install.packages("rdist")
df <- matrix(runif(200), ncol = 2)
dist_mat <- pdist(df)
library(pdist)
library(rdist)
dist_mat <- pdist(df)
dist_mat
pdist(data)
help("pdist")
library(ClustersAnalysis)
matrix_distance(data,"Euclidean")
sqrt(sum((data[1,]-data[2,])^2))
pdist(data,"euclidean")
matrix_distance(data,"euclidean")
pdist(data,"euclidean")
pdist(data,"Euclidean")
library(ClustersAnalysis)
silhouette_ind(data,g,"euclidean")
silhouette_plot(data,g,"Euclidean")
silhouette_plot(data,g,"euclidean")
kmean_clustering_plot(data[,2:4],g,1,2)
sil_pca_plot(data,g,i=2,j=3)
sil_pca_plot(data,g,i=1,j=2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
library(ClustersAnalysis)
data("iris")
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
sil_pca_plot(data,g,i=2,j=3)
silhouette_ind(data,g,"euclidean")
silhouette_plot(data,g,"euclidean")
fisher_test_all(data,g)
for (i in 1:4){
print(kmean_rand_index(data[,i],g))
}
kmean_rand_index(data[,2:4],g)
kmean_clustering_plot(data[,2:4],g,1,2)
sil_pca_plot(data,g,i=1,j=2)
data("iris")
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,4)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(data,g,i=1,j=3)
sil_pca_plot(data,g,i=2,j=3)
silhouette_ind(data,g,"euclidean")
silhouette_plot(data,g,"euclidean")
fisher_test_all(data,g)
for (i in 1:4){
print(kmean_rand_index(data[,i],g))
}
kmean_rand_index(data[,2:4],g)
kmean_clustering_plot(data[,2:4],g,1,2)
kmean_clustering_plot(data[,2:4],g,1,2)
R2_multivariate(data,g)
source('~/.active-rstudio-document', echo=TRUE)
dataa(iris)
data(iris)
colnames(iris)
library(ClustersAnalysis)
iris['Sepal.Length']
type_variable(iris['Sepal.Length'])
class(iris['Sepal.Length'])
length(unique(iris['Sepal.Length']))
unique(iris['Sepal.Length'])
as.vector(iris['Sepal.Length'])
extract_ql(iris)
sapply(iris,type_variable)
t=sapply(iris,type_variable)
colnames(iris)[t=="qualitative"]
colnames(iris)[t=="quantitative"]
install.packages("fastDummies")
library(fastDummies)
dummy_cols(data, select_columns = ['Species'], remove_selected_columns = TRUE)
dummy_cols(data, select_columns ='Species', remove_selected_columns = TRUE)
dummy_cols(iris, select_columns ='Species', remove_selected_columns = TRUE)
library(ClustersAnalysis)
dummy(iris)
variable_qualitative=colnames(iris)[t=="qualitative"]
dummy_cols(iris, select_columns = variable_qualitative, remove_selected_columns = TRUE)
library(ClustersAnalysis)
dummy_data(iris)
iris[' Sepal.Length']=scale(iris$Sepal.Length, center = T)
iris$Sepal.Length
df=iris
df[' Sepal.Length']=scale(df$Sepal.Length, center = T)
df$Sepal.Length
scale(df$Sepal.Length, center = T)
data=iris[,1:4]
data['Sepal.Length']=scale(data$Sepal.Length, center = T)
data$Sepal.Length
data
library(ClustersAnalysis)
dummy_data(iris)
sapply(iris,type_variable)
sapply(iris,type_variable)
apply(iris,MARGIN = 2, type_variable)
library(ClustersAnalysis)
dummy_data(iris)
library(ClustersAnalysis)
dummy_data(iris)
data
variable_quantitative=colnames(data)[t=="quantitative"]
for (i in variable_quantitative){print(i)}
library(ClustersAnalysis)
dummy_data(iris)
iris
data("iris")
dummy_data(iris)
iris
data("iris")
dummy_data(iris)
apply(iris,MARGIN = 2, type_variable)
sapply(iris, type_variable)
sapply(iris, type_variable)
apply(iris, margin=1,type_variable)
apply(iris, margin=2,type_variable)
apply(iris, margin=2,FUN=type_variable)
apply(iris, MARGIN =2,FUN=type_variable)
apply(iris, MARGIN =2,FUN=function(x){return(type_variable(x))})
sapply(iris, type_variable)
data("USArrests")
sapply(USArrests,type_variable)
library(ClustersAnalysis)
dummy_data(iris)
library(ClustersAnalysis)
dummy_data(iris)
dummy_data(iris, rescale = T)
dummy_data(iris, rescale = TRUE)
library(ClustersAnalysis)
dummy_data(iris, rescale = TRUE)
scale(iris$Sepal.Length, center = T, scale = T)
library(ClustersAnalysis)
dummy_data(iris, rescale = TRUE)
t=dummy_data(iris, rescale = TRUE)
mean(t$Species_setosa)
mean(t$Sepal.Length)
sd(t$Sepal.Length)
dummy_data(iris, rescale = TRUE)[1:10,]
dummy_data(USArrests)
class(apply(iris,MARGIN = 2, type_variable))
class(sapply(iris,MARGIN = 2, type_variable))
class(sapply(iris, type_variable))
library(ClustersAnalysis)
dummy_data(USArrests)
t=sapply(USArrests, type_variable)
variable_qualitative=colnames(USArrests)[t=="qualitative"]
length(variable_qualitative)
library(ClustersAnalysis)
dummy_data(USArrests)
dummy_data(iris)
library(ClustersAnalysis)
dummy_data(iris)
dummy_data(iris, rescale = T)
data_type(iris)
data_type(USArrests)
data=iris[,1:4]
silhouette_ind(data, iris$Species)
library(ClustersAnalysis)
silhouette_ind(data, iris$Species)
silhouette_ind(iris, iris$Species)
silhouette_ind(iris$Species, iris$Species)
silhouette_ind(iris[,4:5], iris$Species)
silhouette_ind(iris[,4], iris$Species)
library(ClustersAnalysis)
silhouette_ind(iris[,4], iris$Species)
silhouette_ind(data.frame(iris[,4]), iris$Species)
dummy_data(iris$Species)
sapply(iris$Species,type_variable)
sapply(data.frame(iris$Species),type_variable)
dummy_data(data.frame(iris$Species))
?to.dummy
??to.dummy
dummy_cols(iris$Species)
dummy_cols(iris$Species, remove_selected_columns = T)
dummy_cols(iris$Species, remove_selected_columns = F)
dummy_cols(iris$Species, remove_selected_columns = T)
dummy_cols(iris$Species, remove_first_dummy  = T)
dummy_cols(iris$Species)
dummy_cols(data.frame(iris$Species), remove_selected_columns = T)
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1]
library(ClustersAnalysis)
silhouette_ind(iris$Species,iris$Species)
silhouette_ind(data.frame(iris$Species),iris$Species)
silhouette_ind(data.frame(iris$Sepal.Length),iris$Species)
library(ClustersAnalysis)
sil_pca_plot(iris[,1:4], iris$Species)
sil_pca_plot(iris[,1:4], iris$Species)
sil_pca_plot(iris[,1:4], iris$Species,i=1,j=2)
sil_pca_plot(iris[,1], iris$Species,i=1,j=2)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]), iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=1)
silhouette_ind(data.frame(iris$Species),iris$Species)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=2)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
library(ClustersAnalysis)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
sil_pca_plot(iris[,5], iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=2)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
library(ClustersAnalysis)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
sil_pca_plot(iris[,5], iris$Species,i=1,j=1)
sil_pca_plot(as.matrix(iris[,5]), iris$Species,i=1,j=1)
sil_pca_plot(as.matrix(iris[,4:5]), iris$Species,i=1,j=1)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,3:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:4], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:4], iris$Species,i=1,j=2)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
sil_pca_plot(iris[,3:4], iris$Species)
library(ClustersAnalysis)
sil_pca_plot(iris[,3:4], iris$Species)
library(ClustersAnalysis)
sil_pca_plot(iris[,3:4], iris$Species)
sil_pca_plot(iris[,4], iris$Species)
sil_pca_plot(data.frame(iris[,4]), iris$Species)
sil_pca_plot(data.frame(iris[,4]), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1]
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1][,1]
PCA(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1][,1],graph=FALSE)
library(FactoMineR)
PCA(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1][,1],graph=FALSE)
PCA(dummy_cols(data.frame(iris$Species), remove_first_dummy  = F)[,-1][,1],graph=FALSE)
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
acp_2_axes(dummy_cols(data.frame(iris$Species), remove_first_dummy  = F)[,-1][,1])
acp_2_axes(dummy_cols(data.frame(iris$Species), remove_first_dummy  = F)[,-1])
sil_pca_plot(data.frame(iris[,5]), iris$Species,i=1,j=1)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=1)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=3)
sil_pca_plot(iris[,4:5], iris$Species,i=1,j=2)
sil_pca_plot(iris[,5], iris$Species,i=1,j=2)
sil_pca_plot(as.matrix(iris[,5]), iris$Species,i=1,j=2)
sil_pca_plot(as.matrix(iris[,5]), iris$Species,i=1,j=1)
df=data.frame(iris$Species)
sil_pca_plot(df, iris$Species,i=1,j=1)
data_type(df)
dummy_cols(df, remove_first_dummy  = F)[,-1]
X_bis=dummy_cols(df, remove_first_dummy  = F)[,-1]
acp_2_axes(X_bis,i,j)
acp_2_axes(X_bis,1,2)
acp=acp_2_axes(X_bis,1,2)
sil=silhouette_ind(X_bis,y,d)
library(ClustersAnalysis)
sil_pca_plot(df, iris$Species,i=1,j=1)
data.frame(df)
X_bis=dummy_cols(data.frame(X), remove_first_dummy  = F)[,-1]
X_bis=dummy_cols(data.frame(df), remove_first_dummy  = F)[,-1]
matrice_distance=matrix_distance(X_bis,d)
matrice_distance=matrix_distance(X_bis,'euclidean')
moyenne_distance=mean_distance(matrice_distance,'euclidean')
moyenne_distance=mean_distance(matrice_distance, iris$Species)
silhouette_ind(iris[,1:2], iris$Species)
silhouette_ind(iris[,5], iris$Species)
silhouette_ind(data.frame(iris[,5]), iris$Species)
silhouette_ind(dummy_cols(iris[,5], remove_first_dummy  = F)[,-1], iris$Species)
dummy_cols(X, remove_first_dummy  = F)[,-1]
dummy_cols(iris$Species, remove_first_dummy  = F)[,-1]
class(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1])
data_type
data_type(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1])
dummy_data(dummy_cols(iris$Species, remove_first_dummy  = F)[,-1])
library(ClustersAnalysis)
sil_pca_plot(iris$Species, iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Species), iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Sepal.Length), iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=1)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=2)
sil_pca_plot(iris[,1:2], iris$Species,i=1,j=3)
library(ClustersAnalysis)
help(ClusterAnalysis)
data("iris")
iris
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,5)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,2)
data=iris[,1:4]
g=iris[,5]
test.value(data,g,3)
kmean_clustering_plot(data[,2:4],g,1,2)
data
silhouette_plot(data, iris$Species)
silhouette_plot(iris$Sepal.Length, iris$Species)
silhouette_plot(dât.frame(iris$Sepal.Length), iris$Species)
silhouette_plot(data.frame(iris$Sepal.Length), iris$Species)
silhouette_plot(data.frame(iris$Species), iris$Species)
silhouette_plot(data.frame(iris$Petal.Length), iris$Species)
sil_pca_plot(data,g,i=2,j=3)
sil_pca_plot(data,g,i=1,j=2)
data("iris")
library(ClustersAnalysis)
data=iris[,1:4]
g=iris[,5]
test.value(data,g)
sil_pca_plot(data,g,i=1,j=2)
sil_pca_plot(iris[,1],g,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]),g,i=1,j=2)
sil_pca_plot(data.frame(iris[,1]),g,i=1,j=1)
data("iris")
library(ClustersAnalysis)
sil_pca_plot(data.frame(iris$Sepal.Length),g,i=1,j=1)
sil_pca_plot(data.frame(iris$Sepal.Length),iris$Species,i=1,j=1)
sil_pca_plot(data.frame(iris$Sepal.Length),iris$Species,i=1,j=1)
